/*

*/

FUNCTION_BLOCK tipper // Block definition (there may be more than one block per file)

VAR_INPUT // Define input variables
error : REAL;
adcdiff : REAL;
END_VAR

VAR_OUTPUT // Define output variable
pGain : REAL;
dGain : REAL ;
END_VAR

FUZZIFY error
TERM small := (10,1) (20, 1) (30, 0) ;
TERM big := (60,1) (90,0) (100, 1) (200,1) (300, 0);
END_FUZZIFY

FUZZIFY adcdiff
TERM important := (50, 0) (90, 1) (120,1) (160, 0) ;
TERM unimportant := (5,0) (15,1) (20,1) (30, 0);
END_FUZZIFY

DEFUZZIFY pGain
TERM small := (10,0) (20,1) (40,0);
TERM big := (100,0) (120,1) (150,1) (180,0);
METHOD : COG; // Use 'Center Of Gravity' defuzzification method
DEFAULT := 0; // Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY dGain
TERM small := (15,0) (30,1) (50,0);
TERM big := (90,0) (120,1) (130, 1) (180,1) (200, 0);
METHOD : COG; // Use 'Center Of Gravity' defuzzification method
DEFAULT := 0; // Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY iGain
TERM small := (30,0) (40,1) (50,0);
TERM big := (90,0) (100,1) (110, 1) (120,1) (130, 0);
METHOD : COG; // Use 'Center Of Gravity' defuzzification method
DEFAULT := 0; // Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
AND : MIN; // Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
ACT : MIN; // Use 'min' activation method
ACCU : MAX; // Use 'max' accumulation method

RULE 1 : IF error IS big THEN pGain IS big;
RULE 2 : IF error IS small THEN pGain IS small;
RULE 3 : IF adcdiff IS important THEN dGain is big;
RULE 4 : IF adcdiff IS unimportant THEN dGain is small;
END_RULEBLOCK

END_FUNCTION_BLOCK

